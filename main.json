{"meta":{"generator":"2.0.0","format":20,"date":1730483118955},"custom":{"general":{"name":"general","files":{"welcome":{"name":"Welcome","fileName":"welcome","type":"md","content":"<div align=\"center\">\n  <br />\n  <p>\n    <a href=\"https://fnbr.js.org/\"><img src=\"https://fnbr.js.org/static/logo.png\" width=\"546\" alt=\"fnbr.js\" id=\"fnbrjs-logo\" style=\"filter: drop-shadow(0 3px 4px #333);\" /></a>\n  </p>\n  <p>\n    <a href=\"https://nodei.co/npm/fnbr/\"><img src=\"https://nodei.co/npm/fnbr.png?downloads=true&stars=true\" alt=\"NPM info\" /></a>\n  </p>\n</div>\n\n# fnbr.js\nA library to interact with Fortnite's HTTP and XMPP services\n\n## Installation\n```\nnpm i fnbr\n```\n\n## Example\nExample: \n```javascript\nconst { Client } = require('fnbr');\n\nconst client = new Client();\n\nclient.on('friend:message', (message) => {\n  console.log(`Message from ${message.author.displayName}: ${message.content}`);\n  if (message.content.toLowerCase().startsWith('ping')) {\n    message.reply('Pong!');\n  }\n});\n\nclient.on('ready', () => {\n  console.log(`Logged in as ${client.user.self.displayName}`);\n});\n\nclient.login();\n```\n\n## Help\nFeel free to join [this Discord server](https://discord.gg/j5xZ54RJvR)\n\n## License\nMIT License\n\nCopyright (c) 2020-2023 Nils S.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n","path":"../fnbr.js/docs/general/welcome.md"},"auth":{"name":"Authentication","fileName":"auth","type":"md","content":"# Authentication\nfnbr.js does not support email & password as an authentication method as you get a captcha in 9 out of 10 cases.\n\n## So whats the preferred way of authenticating?\nYou should use an authorization code for the first time you login and generate a device auth.\n\n**Example:**\nHow does that look like code wise?\n```javascript\nconst { readFile, writeFile } = require('fs').promises;\nconst { Client } = require('fnbr');\n\n(async () => {\n  let auth;\n  try {\n    auth = { deviceAuth: JSON.parse(await readFile('./deviceAuth.json')) };\n  } catch (e) {\n    auth = { authorizationCode: async () => Client.consoleQuestion('Please enter an authorization code: ') };\n  }\n\n  const client = new Client({ auth });\n\n  client.on('deviceauth:created', (da) => writeFile('./deviceAuth.json', JSON.stringify(da, null, 2)));\n\n  await client.login();\n  console.log(`Logged in as ${client.user.self.displayName}`);\n})();\n```\n\n## How do I obtain an authorization code?\nYou can use [this link](https://www.fortnite.com/id/login?redirectUrl=https%3A%2F%2Fwww.epicgames.com%2Fid%2Fapi%2Fredirect%3FclientId%3D3446cd72694c4a4485d81b77adbb2141%26responseType%3Dcode) and copy the 32 character code! An authorization code can only be used once and expires after 300 seconds. Thats why you should generate a device auth with it.\n\n## How does a device auth work?\nA device auth doesn't expire and it consists of a accountId, deviceId and secret. You can create as many device auths for an account as you want.\n","path":"../fnbr.js/docs/general/auth.md"},"changelog":{"name":"Changelog","fileName":"changelog","type":"md","content":"# Changelog\n\n## 4.0.0\n\n### Additions\n* User Cache\n  * Added a user cache that is disabled by default\n* Party\n  * Added `PartyMember#isSittingOut`\n  * Added `PartyMember#playlist`\n  * Added `PartyMember#chatBan()` and `ClientParty#chatBan()` to ban a party member from the party chat\n* Login Errors\n  * Added `AuthenticationMissingError`, `XMPPConnectionError` and `XMPPConnectionTimeoutError` to improve error handling\n* Client Config\n  * Added `ClientOptions#xmppMaxConnectionRetries`\n  * Added `ClientOptions#disablePartyService`\n  * Added `ClientSettings#friendOfflineTimeout` to define after how many ms after the last presence was received the client will consider a friend offline\n* Auth Clients\n  * Added `fortniteNewSwitchGameClient` to the list of available clients\n\n### Changes\n* Party\n  * **(Breaking)** `ClientParty#setPlaylist()` no longer accepts a `Playlist` struct\n  * **(Breaking)** Removed `PartyMember#assistedChallenge`\n* Friends\n  * **(Breaking)** Moved `Client#friends` to `FriendManager#list`\n  * **(Breaking)** Moved `Client#addFriend()`, `Client#removeFriend()`, `Client#sendFriendMessage()` and `Client#checkFriendOfferOwnership()` to `FriendManager#add()`, `FriendManager#remove()`, `FriendManager#sendMessage()` and `FriendManager#checkOfferOwnership()` respectively\n* Users\n  * **(Breaking)** Moved `Client#getProfile()` to `UserManager#fetch()` and `UserManager#fetchMultiple()`\n  * **(Breaking)** Moved `Client#blockedUsers` to `UserManager#blocklist`\n  * **(Breaking)** Moved `Client#blockUser()` and `Client#unblockUser()` to `UserManager#block()` and `UserManager#unblock()` respectively\n  * **(Breaking)** Moved `Client#searchProfiles()`, `Client#getUserAvatar()`, `Client#getGlobalProfile()` to `UserManager#search()`, `UserManager#fetchAvatar()` (and `UserManager#fetchAvatarMultiple()`) and `UserManager#fetchGlobalProfile()` (and `UserManager#fetchGlobalProfileMultiple()`) respectively\n* Tournaments\n  * **(Breaking)** Moved `Client#getTournaments()`, `Client#getTournamentSessionMetadata()`, `Client#getTournamentWindowResults()`, `Client#getEventTokens()` and `Client#downloadTournamentReplay()` to `TournamentManager#get()`, `TournamentManager#getData()`, `TournamentManager#getSessionMetadata()`, `TournamentManager#getWindowResults()` `TournamentManager#getEventTokens()` and `TournamentManager#downloadReplayCDNFile()` respectively\n* STW\n  * **(Breaking)** Moved `Client#getSTWProfile()`, `Client#getSTWNews()` and `Client#getSTWWorldInfo()` to `STWManager#getProfile()`, `STWManager#getNews()` and `STWManager#getWorldInfo()` respectively\n* Enums\n  * **(Breaking)** Updated the `Playlist` enum to include the currently available playlists\n* Structures\n  * **(Breaking)** Renamed `Playlist` interface to `Island` and updated its properties\n  * **(Breaking)** `CosmeticsVariantMeta` now has lower-case keys\n* Party Meta\n  * Removed the `path` property from `ClientPartyMember#setOutfit()` as it's no longer needed\n* Documentation\n  * Updated examples\n\n### Fixes\n* Party Meta\n  * Updated `ClientPartyMember#setOutfit()` to use the new structure\n  * Added, changed and removed various party meta keys to match what the game uses\n* Misc\n  * Removed some unused GraphQL code\n  * Minor bug fixes\n\n<hr>\n\n## 3.1.6\n\n### Additions\n* Party\n  * Added a `path` property to `ClientPartyMember#setOutfit()`, `ClientPartyMember#setBackpack()`, `ClientPartyMember#setPet()`, `ClientPartyMember#setPickaxe()`, `ClientPartyMember#setEmote()` and `ClientPartyMember#setEmoji()`\n\n### Fixes\n* Endpoints\n  * Updated hosts\n\n<hr>\n\n## 3.1.5\n\n### Fixes\n* Party\n  * Fixed an issue that caused all party members to be invisible if the bot created the party\n\n<hr>\n\n## 3.1.4\n\n### Fixes\n* Stats\n  * Fix an issue that caused `Client#getBRStats()` to throw an error when the user had stats keys that were not parsed properly\n* User Search\n  * Fix an issue that caused `Client#searchProfiles()` to throw an error if a search result could not be resolved\n\n<hr>\n\n## 3.1.3\n\n### Fixes\n* Creative Discovery\n  * Updated to new the new discovery endpoint\n\n<hr>\n\n## 3.1.2\n\n### Fixes\n* Battle Royale Stats\n  * Fixed an issue that caused values like k/d and winrate to be Infinity instead of 0\n* HTTP Ratelimit handling\n  * The HTTP client now properly handles ratelimits on the user search api (`Client#searchProfiles()`)\n\n<hr>\n\n## 3.1.1\n\n### Fixes\n* Client Reconnecting\n  * Fixed an issue that caused the client to ignore `ClientOptions#fetchFriends`,\n    `ClientOptions#createParty` and `ClientOptions#forceParty` when reconnecting\n* Tournaments\n  * Fixed an issue that caused some tournaments to not be returned by `Client#getTournaments()`\n* STW Stats\n  * Fixed `STWStats#level` and `STWStats#rewardsClaimedPostMaxLevel` being `NaN` in rare cases\n\n<hr>\n\n## 3.1.0\n\n### Changes\n* Server Status\n  * **(Breaking)** `Client#getFortniteServerStatus` now returns a `FortniteServerStatus` instance\n  * **(Breaking)** `Client#getEpicgamesServerStatus` now returns a `EpicgamesServerStatus` instance\n\n### Fixes\n* STW Profiles\n  * Fixed a few issues that made `Client#getSTWProfile` incorrectly throw an error in rare cases\n* Tournament Session Downloading\n  * Improved error handling for downloading tournament replays and tournament session metadata\n* Blurl Streams\n  * Improvements for downloading blurl streams (blurl streams would not get parsed correctly in rare cases)\n* Docs Examples\n  * Fixed \"refreshtoken\" and \"fortniteapicom\" examples\n\n<hr>\n\n## 3.0.0\n\n### Additions\n* Enums\n  * Added `XBOX_SERIES_X` and `PLAYSTATION_5` to the `Platform` enum\n  * Added the `STWLeadSynergy` enum\n  * Added the `PresenceOnlineType` enum\n* Client Config\n  * Added `ClientOptions#language`\n  * Added `ClientOptions#statsPlaylistTypeParser`\n  * Added comments to many config options\n* Friend Online And Offline Events\n  * Added `Client#friend:online` and `Client#friend:offline` events\n  * Added `ClientOptions#friendOnlineConnectionTimeout`\n* Launcher Refresh Token Auth\n  * Added `AuthOptions#createLauncherSession`\n  * Reworked launcher refresh token auth to ensure that a token will always be created\n* Save The World Profiles\n  * Added `Client#getSTWProfile()`\n  * Can be used to calculate a profile's power level, fetch its survivors, etc\n* Save The World Info\n  * Added `Client#getSTWWorldInfo()`\n* Party Refreshing\n  * Added `Party#fetch()`\n* Client Party Member\n  * Added `ClientPartyMember#setCrowns()`\n* Party Member State Updated Events\n  * Added `Client#party:member:outfit:updated`\n  * Added `Client#party:member:backpack:updated`\n  * Added `Client#party:member:emote:updated`\n  * Added `Client#party:member:pickaxe:updated`\n  * Added `Client#party:member:readiness:updated`\n  * Added `Client#party:member:matchstate:updated`\n\n### Changes\n* Party Fetching\n  * Added `raw` parameter to `Client#getParty()` that will make the method return the raw party data\n  * `Client#getParty()` now handles errors correctly\n* Stats\n  * **(Breaking)** `Client#getBRStats()` now returns a `Stats` object\n* News\n  * **(Breaking)** Removed `Client#getNews()`\n  * Added `Client#getBRNews()`\n  * Added `Client#getSTWNews()`\n* Battle Royale Account Level\n  * **(Breaking)** `Client#getBRAccountLevel()` now returns a `BRAccountLevelData` object\n* Event Tokens\n  * **(Breaking)** `Client#getEventTokens()` now returns a `EventTokens` object\n\n### Fixes\n* Fortnite EULA Accept Method\n  * Fixed an issue that occured when Fortnite was bought on an account but never actually launched\n* Client Presence Sweeping\n  * Fixed the documentation of the `maxLifetime` parameter of `Client#sweepPresences()`\n* HTTP Auth Error Handling\n  * Fixed an issue that affected automatic token refreshing\n* Refresh Token Auth\n  * Fixed an issue that occured when the client was kept running longer than the refresh token's lifetime\n* XMPP PARTY_MEMBER_EXPIRED Error\n  * Fixed an error that occured when the client handled its own party member expiration event\n* XMPP Presences\n  * Fixed an issue that caused the presence cache to be populated very slower\n* XBOX External Auth\n  * Added `ExternalAuths#xbl`\n* Party Join Requests\n  * Fixed `sender` and `receiver` being swapped\n* Party Invites\n  * Fixed an issue that caused party member display names to be undefined\n\n<hr>\n\n## 2.4.0\n\n### Additions\n* Global Profile\n  * Added `Client#getGlobalProfile()` and `User#getGlobalProfile()`\n* Avatars\n  * Added `Client#getUserAvatar()` and `User#getAvatar()`\n* Friend Offer Ownership\n  * Added `Client#checkFriendOfferOwnership()` and `Friend#checkOfferOwnership()`\n\n### Changes\n* Party Member Properties\n  * The client will now wait for a member update message before `Client#party:member:joined` is being emitted\n* Battle Royale Account Level\n  * **(Breaking)** `User#getBRAccountLevel()` will now return the account level data directly, instead of an array with one entry\n\n### Fixes\n* Multiple Display Name Lookups\n  * `Client#getProfile()` will no longer throw an error if one of the user display name lookups fail\n* Party Member Emote\n  * Trying to access `PartyMember#emote` will no longer throw an error if an emote is not set\n\n<hr>\n\n## 2.3.0\n\n### Additions\n* Battle Royale Account Level\n  * Added `Client#getBRAccountLevel()` and `User#getBRAccountLevel()`\n* Storefront Keychain\n  * Added `Client#getStorefrontKeychain()`\n* Mutual Friends\n  * Added `Client#getMutualFriends()` and `Friend#getMutualFriends()`\n* Tournament Session Metadata\n  * Added `Client#getTournamentSessionMetadata()`\n* Season Timestamps\n  * Added season end timestamp for CH2_S8\n  * Added season start timestamp for CH3_S1\n* Class exports\n  * Added exports for all classes and exceptions\n\n<hr>\n\n## 2.2.0\n\n### Additions\n* Tournament Tokens\n  * Added `Client#getEventTokens()`\n  * Can be used to fetch arena divisions of any season, check tournament eligiblity and more\n\n### Changes\n* Auth Refreshing\n  * Added a config option to control what the client will do in case the refresh token is invalid (`ClientOptions#restartOnInvalidRefresh`)\n  * Removed `ClientOptions#tokenVerifyInterval`\n  * Improved error messages for auth refresh errors\n* Fortnite News\n  * Added the new battle royale MOTD news endpoint to `Client#getNews()`\n\n### Fixes\n* Auth Refreshing\n  * Fixed an issue that caused the client to not reauthenticate properly\n* Device Auths\n  * Readded support for device auths in snake case (was removed in 2.0.0)\n\n<hr>\n\n## 2.1.0\n\n### Additions\n* Tournament replays\n  * This method returns a `Buffer` for an actual .replay file (which can be even used ingame)\n  * Config options allow you to only download specific data\n  * Added `Client#downloadTournamentReplay()`\n* Authentication\n  * Added an alternative to device auths (since they're known for causing password resets)\n  * A launcher refresh token lasts for 30 days and needs to be refreshed each time you authenticate (using the event)\n  * Click [here](https://fnbr.js.org/#/docs/main/stable/examples/refreshtoken) for an example\n  * Added the `Client#refreshtoken:created` event\n  * Added `AuthOptions#launcherRefreshToken`\n* Creative Island Lookup\n  * Added `Client#getCreativeIsland()`\n* Creative Discovery Surface\n  * Added `Client#getCreativeDiscoveryPanels()`\n\n<hr>\n\n## 2.0.2\n\n### Fixes\n* Friend Caches\n  * Fixed an issue that caused the friend cache to hold no values\n* Client Config\n  * Fixed missing documentation for some `ClientOptions` properties\n\n<hr>\n\n## 2.0.1\n\n### Additions\n* Season Timestamps\n  * Added season end timestamp for CH2_S7\n  * Added season start timestamp for CH2_S8\n\n### Fixes\n* Parties\n  * Fixed `ClientParty#hideMembers()` (did not hide members properly)\n\n<hr>\n\n## 2.0.0\n\n### Additions\n* TypeScript Rewrite\n  * The library has been completely rewritten in TypeScript\n  * Type definitions for all classes\n  * Better intellisense\n  * Improved documentation\n* Exceptions\n  * Custom errors that extend `Error` were added. Examples: `FriendNotFoundError`, `FriendshipRequestAlreadySentError`\n  * Documentation has been added for the exceptions a method could potentially throw\n* Request To Join\n  * Added `Client#sendRequestToJoin()`\n  * Added `Client#party:joinrequest`\n  * Added `Friend#sendJoinRequest()`\n* Blurl Streams\n  * Added `Client#downloadBlurlStream()`\n  * Added `Client#getRadioStations()`\n* Party Properties\n  * Added `Party#squadFill`\n  * Added `Party#playlist`\n  * Added `Party#customMatchmakingKey`\n* Client Party Methods\n  * Added `ClientParty#hideMember()`\n  * Added `ClientParty#setMaxSize()`\n  * Added `ClientParty#setSquadFill()`\n* Party Member Properties\n  * PartyMember now extends User\n  * Added `PartyMember#assistedChallenge`\n  * Added `PartyMember#banner`\n  * Added `PartyMember#battlepass`\n  * Added `PartyMember#customDataStore`\n  * Added `PartyMember#inputMethod`\n  * Added `PartyMember#isMarkerSet`\n  * Added `PartyMember#markerLocation`\n  * Added `PartyMember#matchInfo`\n  * Added `PartyMember#platform`\n* Client Party Member Methods\n  * Added `ClientPartyMember#setAssistedChallenge()`\n  * Added `ClientPartyMember#setMarker()`\n  * Added `ClientPartyMember#setPet()`\n* Client Status\n  * Added `ClientOptions#defaultOnlineType`\n  * Added `Client#resetStatus()`\n* User Blocking / Unblocking\n  * Added `User#block()`\n  * Added `BlockedUser#unblock()`\n* Friend's Parties\n  * Added `Friend#party`\n* Client Config\n  * Added `ClientOptions#cacheSettings`\n  * Added `ClientOptions#connectToXMPP`\n  * Added `ClientOptions#createParty`\n  * Added `ClientOptions#forceNewParty`\n  * Added `ClientOptions#handleRatelimits`\n  * Added `ClientOptions#partyBuildId`\n  * Added `ClientOptions#restRetryLimit`\n  * Added `ClientOptions#tokenVerifyInterval`\n  * Added `ClientOptions#fetchFriends`\n* Client Methods\n  * Added `Client#getParty()`\n  * Added `Client#getClientParty()`\n  * Added `Client#searchProfiles()`\n  * Added `Client#sweepPresences()`\n* Events\n  * Added `Client#party:member:confirmation`\n  * Added `Client#disconnected`\n  * Added `Client#xmpp:chat:error`\n  * Added `Client#xmpp:message:error`\n  * Added `Client#xmpp:presence:error`\n\n### Changes\n* Client Status\n  * **(Breaking)** Renamed `ClientOptions#status` to `ClientOptions#defaultStatus`\n  * **(Breaking)** Added the parameter `onlineType` to `Client#setStatus`\n* Tournaments\n  * **(Breaking)** `Client#getTournaments()` now returns `Array<Tournament>`\n  * **(Breaking)** Renamed `Client#getTournamentWindow()` to `Client#getTournamentWindowResults()`\n* User Blocking / Unblocking\n  * **(Breaking)** Renamed `Client#friend:blocked` and `Client#friend:unblocked` to `Client#user:blocked` and `Client#user:unblocked`\n  * **(Breaking)** Renamed `Client#blockFriend()` and `Client#unblockFriend()` to `Client#blockUser()` and `Client#unblockUser()`\n  * **(Breaking)** Renamed `Client#blockedFriends` to `Client#blockedUsers`\n* Client Methods\n  * **(Breaking)** Renamed `Client#getServerStatus()` to `Client#getEpicgamesServerStatus()`\n  * **(Breaking)** Renamed `Client#getBRStore()` to `Client#getStorefronts()`\n  * `Client#getBRStats()` now accepts an array of user IDs\n  * **(Breaking)** Removed `Client#getRadioStream()` in favor of `Client#downloadBlurlStream()`\n\n### Fixes\n* Fixed Client Party Member Readiness Methods\n  * Fixed `ClientPartyMember#setReadiness()`\n  * Fixed `ClientPartyMember#setSittingOut()`\n* Client XMPP security vulnerability\n  * Fixed a vulnerability that allowed programs to emit client events\n* Wait For Event Method\n  * Fixed the `filter` parameter for `Client#waitForEvent()`\n\n<hr>\n\n## 1.4.1\n\n### Fixes\n* Parties\n  * Fixed \"outdated version\" bug that occurred when a user tried to join the client's party\n\n<hr>\n\n## 1.4.0\n\n### Additions\n* Client Methods\n  * Added `Client#getRadioStream()`\n* Parties\n  * Added `ClientPartyMember#setPlaying()`\n  * Added `PartyMember#fetch()` (Used internally to resolve display names)\n* Documentation\n  * Added third party API examples\n\n### Fixes\n* Parties\n  * Fixed extremely rare bug that caused the party to be stuck on the patching state\n  * Fixed bug that prevented users from accepting the bot's party invites if its party is private\n  * Fixed rare party stale revision bug\n  * Fixed party voice chat icon not showing up\n* Misc\n  * Code style updates\n\n<hr>\n\n## 1.3.0\n\n### Additions\n* Parties\n  * Added `Party#setPlaylist()`\n  * Added `ClientPartyMember#setSittingOut()`\n  * Added `ClientPartyMember#clearBackpack()`\n* Client Methods\n  * Added `Client#getFortniteServerStatus()`\n\n### Fixes\n* Parties\n  * Updated the party build id for version 14.10 (\"old version\" join bug)\n  * Fixed cosmetic variants\n* XMPP\n  * Fixed XMPP reconnection error (Thanks to [Théo](https://discord.com/users/448882532830674948) for reporting it)\n  * The XMPP client will now use a new resource string each time you restart the client\n* Presences\n  * Fixed issue that occurred when sending a status (presence) to a single friend\n* Client Methods\n  * Fixed `Client#getNews()` returning an empty array sometimes\n  * The client will now ignore errors on shutdown\n* Misc\n  * Updated season start and end timestamps\n  * Fixed documentation for `Party#hideMembers()`\n\n<hr>\n\n## 1.2.0\n\n### Additions\n* Client Methods\n  * Added `Client#getFortniteServerStatus()`\n  * Added `Client#getTournaments()`\n  * Added `Client#getTournamentWindow()`\n* Parties\n  * Added `PartyMember#backpack`\n\n### Changes\n* Debugging\n  * Added total request time to HTTP debugging \n\n### Fixes\n* Parties\n  * Fixed error that occurred when the client accepted another bot's invites\n  * Trying to join a party which the client previously got kicked from now throws an error\n  * The client now handles user_has_party when trying to join a party\n  * Fixed some bugs related to party invites\n* Authentication Refreshing\n  * The client will now reauthenticate when a request fails due to an invalid token\n  * Fixed reauthentication issue\n\n<hr>\n\n## 1.1.0\n\n### Additions\n* Presences\n  * Added `ClientOptions#cachePresences`\n* Client Methods\n  * Added `Client#getBREventFlags()`\n* Parties\n  * Added `Party#hideMembers()`\n* Documentation\n  * Added deviceauth example\n\n### Changes\n* Presences\n  * **(Breaking)** Added `before` and `after` parameter to `Client#friend:presence`\n* Parties\n  * **(Breaking)** `PartyMember#outfit`, `PartyMember#pickaxe` and `PartyMember#emote` now return the ID instead of the asset path\n\n### Fixes\n* Parties\n  * Fixed error that occurred when the client got kicked from its party\n  * Fixed accepting party invites & joining parties\n\n<hr>\n\n## 1.0.3\n\n### Additions\n* JSDoc\n  * Improved JSDoc for some methods\n  * Added examples for variants\n\n### Changes\n* Party Privacy\n  * `Party#setPrivacy()` must now use the enum\n\n### Fixes\n* Client Login\n  * `Client#login()` now waits until all party properties are fully loaded\n* Party Privacy\n  * `Party#setPrivacy()` now updates `PartyConfig#privacy`\n  * Setting the party privacy to the current one now throws an error instead of glitching out the party\n* Parties\n  * Fixed party issues when the xmpp client reconnects (caused -93 and -81 error codes)\n  * Previous emote is now being cleared when you set it\n  * You no longer have to set a delay to emote when someone joins the client's party\n","path":"../fnbr.js/docs/general/changelog.md"}}},"examples":{"name":"examples","files":{"simple":{"name":"Simple Client","fileName":"simple","type":"js","content":"/* eslint-disable */\nconst { Client } = require('fnbr');\n\nconst client = new Client();\n\nclient.on('friend:message', (message) => {\n  console.log(`Message from ${message.author.displayName}: ${message.content}`);\n  if (message.content.toLowerCase().startsWith('ping')) {\n    message.reply('Pong!');\n  }\n});\n\nclient.on('party:member:message', (message) => {\n  console.log(`Party Message from ${message.author.displayName}: ${message.content}`);\n});\n\nclient.on('ready', () => {\n  console.log(`Logged in as ${client.user.self.displayName}`);\n});\n\nclient.login();\n","path":"../fnbr.js/docs/examples/simple.js"},"deviceauth":{"name":"DeviceAuth Client","fileName":"deviceauth","type":"js","content":"/* eslint-disable */\nconst { readFile, writeFile } = require('fs').promises;\nconst { Client } = require('fnbr');\n\n(async () => {\n  let auth;\n  try {\n    auth = { deviceAuth: JSON.parse(await readFile('./deviceAuth.json')) };\n  } catch (e) {\n    auth = { authorizationCode: async () => Client.consoleQuestion('Please enter an authorization code: ') };\n  }\n\n  const client = new Client({ auth });\n\n  client.on('deviceauth:created', (da) => writeFile('./deviceAuth.json', JSON.stringify(da, null, 2)));\n\n  await client.login();\n  console.log(`Logged in as ${client.user.self.displayName}`);\n})();\n","path":"../fnbr.js/docs/examples/deviceauth.js"},"refreshtoken":{"name":"RefreshToken Client","fileName":"refreshtoken","type":"js","content":"/* eslint-disable */\nconst { readFile, writeFile } = require('fs').promises;\nconst { Client } = require('fnbr');\n\n(async () => {\n  let auth;\n  try {\n    auth = { launcherRefreshToken: await readFile('./refreshToken', 'utf8') };\n  } catch (e) {\n    auth = { authorizationCode: async () => Client.consoleQuestion('Please enter an authorization code: ') };\n  }\n\n  const client = new Client({ auth });\n\n  client.on('refreshtoken:created', (refreshTokenData) => writeFile('./refreshToken', refreshTokenData.token));\n\n  await client.login();\n  console.log(`Logged in as ${client.user.self.displayName}`);\n})();\n","path":"../fnbr.js/docs/examples/refreshtoken.js"}}},"api examples":{"name":"api examples","files":{"fortniteapicom":{"name":"Fortnite-API.com","fileName":"fortniteapicom","type":"js","content":"/* eslint-disable */\nconst { readFile, writeFile } = require('fs').promises;\nconst { default: axios, AxiosError } = require('axios');\nconst { Client } = require('fnbr');\n\nconst getCosmeticPath = (path) => path\n  .replace(/^FortniteGame\\/Content/, '/Game')\n  .replace(/FortniteGame\\/Plugins\\/GameFeatures\\/BRCosmetics\\/Content/, '/BRCosmetics')\n  .split('/')\n  .slice(0, -1)\n  .join('/');\n\nconst fetchCosmetic = async (name, type) => {\n  try {\n    const { data } = await axios(`https://fortnite-api.com/v2/cosmetics/br/search?name=${encodeURI(name)}&type=${type}`);\n    return data.data;\n  } catch (err) {\n    if (!(err instanceof AxiosError) || err.status !== 404) {\n      throw err;\n    }\n\n    return undefined;\n  }\n};\n\nconst handleCommand = async (m) => {\n  if (!m.content.startsWith('!')) return;\n  const args = m.content.slice(1).split(' ');\n  const command = args.shift().toLowerCase();\n\n  if (command === 'outfit' || command === 'skin') {\n    const skin = await fetchCosmetic(args.join(' '), 'outfit');\n    if (!skin) {\n      await m.reply(`The skin ${args.join(' ')} wasn't found!`);\n      return;\n    }\n\n    await m.client.party.me.setOutfit(skin.id, undefined, undefined);\n    await m.reply(`Set the skin to ${skin.name}!`);\n  } else if (command === 'emote' || command === 'dance') {\n    const emote = await fetchCosmetic(args.join(' '), 'emote');\n    if (!emote) {\n      await m.reply(`The emote ${args.join(' ')} wasn't found!`);\n      return;\n    }\n\n    await m.client.party.me.setEmote(emote.id, getCosmeticPath(emote.path));\n    await m.reply(`Set the emote to ${emote.name}!`);\n  }\n};\n\n(async () => {\n  let auth;\n  try {\n    auth = { deviceAuth: JSON.parse(await readFile('./deviceAuth.json')) };\n  } catch (e) {\n    auth = { authorizationCode: async () => Client.consoleQuestion('Please enter an authorization code: ') };\n  }\n\n  const client = new Client({ auth });\n\n  client.on('deviceauth:created', (da) => writeFile('./deviceAuth.json', JSON.stringify(da, null, 2)));\n  client.on('party:member:message', handleCommand);\n  client.on('friend:message', handleCommand);\n\n  await client.login();\n  console.log(`Logged in as ${client.user.self.displayName}`);\n})();\n","path":"../fnbr.js/docs/api examples/fortniteapicom.js"},"fortniteapiio":{"name":"FortniteAPI.io","fileName":"fortniteapiio","type":"js","content":"/* eslint-disable */\nconst { readFile, writeFile } = require('fs').promises;\nconst { default: axios, AxiosError } = require('axios');\nconst { Client } = require('fnbr');\n\n// Your fortniteapi.io api key. Obtain one at https://dashboard.fortniteapi.io/\nconst APIKEY = '';\n\nconst getCosmeticPath = (path) => path\n  .replace(/^FortniteGame\\/Content/, '/Game')\n  .replace(/FortniteGame\\/Plugins\\/GameFeatures\\/BRCosmetics\\/Content/, '/BRCosmetics')\n  .split('/')\n  .slice(0, -1)\n  .join('/');\n\nconst fetchCosmetic = async (name, type) => {\n  try {\n    const cosmetic = await axios.get({\n      url: `https://fortniteapi.io/v2/items/list?name=${encodeURI(name)}&type.id=${type}`,\n      headers: { Authorization: APIKEY },\n    });\n    return cosmetic.data.items[0];\n  } catch (err) {\n    if (!(err instanceof AxiosError) || err.status !== 404) {\n      throw err;\n    }\n\n    return undefined;\n  }\n};\n\nconst handleCommand = async (m) => {\n  if (!m.content.startsWith('!')) return;\n  const args = m.content.slice(1).split(' ');\n  const command = args.shift().toLowerCase();\n\n  if (command === 'outfit' || command === 'skin') {\n    const skin = await fetchCosmetic(args.join(' '), 'outfit');\n    if (!skin) {\n      await m.reply(`The skin ${args.join(' ')} wasn't found!`);\n      return;\n    }\n\n    await m.client.party.me.setOutfit(skin.id, undefined, undefined);\n    await m.reply(`Set the skin to ${skin.name}!`);\n  } else if (command === 'emote' || command === 'dance') {\n    const emote = await fetchCosmetic(args.join(' '), 'emote');\n    if (!emote) {\n      await m.reply(`The emote ${args.join(' ')} wasn't found!`);\n      return;\n    }\n\n    await m.client.party.me.setEmote(emote.id, getCosmeticPath(emote.path));\n    await m.reply(`Set the emote to ${emote.name}!`);\n  }\n};\n\n(async () => {\n  let auth;\n  try {\n    auth = { deviceAuth: JSON.parse(await readFile('./deviceAuth.json')) };\n  } catch (e) {\n    auth = { authorizationCode: async () => Client.consoleQuestion('Please enter an authorization code: ') };\n  }\n\n  const client = new Client({ auth });\n\n  client.on('deviceauth:created', (da) => writeFile('./deviceAuth.json', JSON.stringify(da, null, 2)));\n  client.on('party:member:message', handleCommand);\n  client.on('friend:message', handleCommand);\n\n  await client.login();\n  console.log(`Logged in as ${client.user.self.displayName}`);\n})();\n","path":"../fnbr.js/docs/api examples/fortniteapiio.js"}}}},"classes":[],"interfaces":[],"typedefs":[]}